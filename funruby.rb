puts "データを表現する基本的な単位を\"オブジェクト\™という"
puts "オブジェクトの種類を表すものを\™クラス\™という"
puts "\™変数\™とは、オブジェクトにつける名札のようなもの"
puts "\™定数\™は、プログラム上で何度も参照される変更しない値に名前をつける時に使う"
puts "使用が制限されている名前を≠\™予約後\™という"
puts "複数の変数への代入をひとつの式で一度に行うことを、\™多重代入\™という"
#例：first,second,third = 1, 2, 3  
puts "変数名の付け方"
puts "1. わかりやすい単語を選ぶ"
puts "2. あまり省略した名前にはしない"
puts "3. いくつかの単語をつなぎ合わせる際には「＿」で区切る"
puts "------------------------------------------------------------------"

puts "条件判断文：ある条件のときには〇〇という処理を、そうでない時は××という処理をさせたいといった時のために用意されているもの"
puts "条件判断文：if文、unless文、case文"
puts "真偽値を返すメソッドの名前は末尾に？をつける"
puts "真偽値とは条件を表す値で、nilかforseのときは偽で、それ以外の値のときは真、となる"
puts "if文、unless文での比較には、比較演算子、末尾に？がついたメソッド、論理演算子などを使う"
puts "\™if文、unless文\™条件判断を行うための基本的な構文"
puts "case文は「あるオブジェクトの状態によって様々に処理を変えたい」という「場合分け」の処理を書くために使う"
puts "------------------------------------------------------------------"

puts "timesメソッド：回数の指定された繰り返し"
puts "for文：オブジェクトから要素を取り出す場合"
puts "while文：条件を自由に指定したい場合"
puts "until文：whileではわかりにくい条件を指定したい場合"
puts "eachメソッド：オブジェクトから要素を取り出す場合"
puts "loopメソッド：回数制限のない繰り返し"
puts "シンタックスシュガー：人に優しい字面にするために追加された特殊な構文。プログラムをわかりやすくするためには欠かせないもの"
puts "回数の決まった単純な繰り返しはtimesメソッド、それ以外はwhile文とeachメソッドを使う"
puts "-----------------------------------------------------------------"

puts "if文↓"
score = 90
if score >= 80
  p "合格点です"
elsif score >= 70
  p "合格です"
else
  p "頑張りましょう"
end

puts "変数展開↓"
i = 1
x = "Ruby"

p "第#{i}回#{x}入門講座"

puts "Rubyのマッチング演算子は=~。/ と /のあいだに正規表現のパターンを書くことによって、正規表現のオブジェクトは作れる。"
puts "=~ /パターン/"
puts "Array#lengthメソッドはレシーバに指定した配列オブジェクトの要素数を返す。"
puts "!演算子やnotを使うことによって、真と偽の判定を逆にすることができる。"
puts "-----------------------------------------------------"
puts "オブジェクトを操作する手続きのことをメソッドと呼ぶ。キーワードのdefを使うことによって、そのオブジェクトに手続きを追加できる。"
puts "オブジェクトはデータとそのデータに対する手続きがひとつになったもの。
puts "オブジェクトに手続きをおこなうように頼むことが、他の人に仕事を頼む様子に似ていることから"
puts "「メッセージパッシング」と呼ぶ。"
puts "つまりメソッド呼出しをおこなう時は、オブジェクトへメッセージを送り、そのメッセージを受け取ったオブジェクトはメッセージに対応する処理をおこなう。"
puts "メソッド名のメッセージを受け取ったオブジェクトは、そのメッセージに対応した処理を知っていればおこなうが、知らない時はエラーになる。"
puts "このようなメッセージに対応する処理のことをメソッドと呼ぶ。"
puts "また、メッセージを受け取るオブジェクトのことをレシーバと呼ぶ。"
puts "以下のような「レシーバ.メソッド名」や「レシーバ::メソッド名」の形でもメソッドを呼び出せる。"
puts "- レシーバ.メソッド名"
puts "- レシーバ::メソッド名"
puts "レシーバを書くことによって、メッセージを送るオブジェクトを指定している。"
puts "------------------------------------------------------------------------------"
puts "継承"
puts "class クラス名 < 継承元クラス名 end"
puts "空のハッシュ作成法"
puts "empty = Hash.new()"
puts "優先順位"
puts "-------"
puts "! > && > || > and > or"